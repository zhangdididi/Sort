
public static void mergeSort(int[] array) {
    //后两个参数表示进行递归并排序的区间
    mergeSortHelper(array, 0, array.length);
}

public static void mergeSortHelper(int[] array, int left, int right) {
    //空区间或只有一个元素,不用排序
    if (left >= right || right - left == 1) {
        return;
    }
    //后序遍历的方式,当前的待排序区间拆分成两部分
    //递归的对这两个子区间进行归并排序，保证这个两个区间是有序的
    //然后再进行合并
    int mid = (left + right) / 2;
    //[left, mid)   [mid, right)
    mergeSortHelper(array, left, mid);
    mergeSortHelper(array, mid, right);
    merge(array, left, mid, right);
}

public static void merge(int[] array, int left, int mid, int right) {
    //创建一部分临时空间进行归并
    //长度应该是两个待排序区间长度的总和
    int length = right - left;
    int[] output = new int[length];
    //
    int outputIndex = 0;
    int i = left;
    int j = mid;
    while (i < mid && j < right) {
        //小于等于的话,靠前相等的元素就会放在前面,保证其稳定性
        if (array[i] <= array[j]) {
            output[outputIndex++] = array[i++];
        } else {
            output[outputIndex++] = array[j++];
        }
    }
    //循环结束之后,只有一个是遍历完的
    while (i < mid) {
        output[outputIndex++] = array[i++];
    }
    while (j < right) {
        output[outputIndex++] = array[j++];
    }
    for (int k = 0; k < length; k++) {
        array[left + k] = output[k];
    }
}
