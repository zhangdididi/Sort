public static void quickSort(int[] array) {
        //要排序区间的范围
        quickSortHelper(array, 0, array.length - 1);
}

public static void internalQuickSort(int[] array, int left, int right) {
    //如果只有一个元素或者没有元素.不需要排序
    if (left >= right) {
        return;
    }
    //选基准值，把小于基准值的放在左侧，大于基准值的放在右侧
    //index 表示整理一次后基准值被交换到的下标位置
    int index = partition(array, left, right);
    //再根据这个基准值去取到他左侧的 right 和右侧的 left
    internalQuickSort(array, left, index - 1);//递归基准值左侧数组
    internalQuickSort(array, index + 1, right);//递归基准值右侧数组
}

private static int partition(int[] array, int left, int right) {
    //先将最右边的数字作为基准值
    int standardIndex = right;
    int standardValue = array[right];
    while (left < right) {
        while (left < right && array[left] <= standardValue) {
            //当左边元素一直小于基准值的时候,left 向后移动
            left++;
        }
        //上面的 while 结束之后,left 指向比基准值大的元素

        while (left < right && array[right] >= standardValue) {
            //当右边元素一直大于基准值的时候,right 向前移动
            right--;
        }
        //上面这层循环结束,right 指向比基准值小的元素
        //这时交换两个位置的元素
        swap(array, left, right);
    }
    //整个循环结束,left 和 right 相等了,此时交换该下标元素和基准值
    swap(array, left, standardIndex);
    //最后返回交换后基准值的下标 (left 或者 right)
    return left;
}
