    public static void quickSort(int[] array) {
        internalQuickSort(array, 0, array.length - 1);
    }

    private static void internalQuickSort(int[] array, int left, int right) {
        //如果数组长度为0或1就无须排序
        if (left >= right) return;
        //选基准值，将小于基准值的元素都放在数组左侧，大于基准值的都放在数组右侧
        int index = partition(array, left, right);
        //分别递归处理左子序列和右子序列
        internalQuickSort(array, left, index - 1);
        internalQuickSort(array, index + 1, right);
    }


    private static int partition(int[] array, int left, int right) {
        //先创建临时变量保存基准值的下标和值
        int standardIndex = right;
        int standardValue = array[standardIndex];
        //在left和right相遇之前进入循环
        while (left < right) {
            while (left < right && array[left] <= standardValue) {
                left++;
            }
            //上面循环结束，left指向左边第一个大于基准值的元素
            while (left < right && array[right] >= standardValue) {
                right--;
            }
            //上面循环结束，right指向右边第一个小于基准值的元素
            //这时交换两个元素
            swap(array, left, right);
        }
        //当left和right相遇时，再将最开始找的基准值换到这个位置
        swap(array, left, standardIndex);
        return left;
    }

    private static void swap(int[] array, int x, int y) {
        int temp = array[x];
        array[x] = array[y];
        array[y] = temp;
    }
